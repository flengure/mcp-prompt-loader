# Example MCP Catalog Configurations
# Showing different mounting strategies for the MCP Prompt Loader

name: prompt-loader-examples
displayName: "MCP Prompt Loader Examples"

registry:
  # RECOMMENDED: Directory Mount Approach
  directory-mount-example:
    title: "Directory Mount (Recommended)"
    description: "Mount entire prompt directory - most flexible approach"
    type: server
    image: flengure/mcp-prompt-loader:latest

    parameters:
      promptFile:
        type: string
        title: "Prompt File"
        description: "Name of the prompt file (relative to mounted directory)"
        default: "hummingbot.txt"
        examples:
          - value: "hummingbot.txt"
          - value: "n8n.txt"
          - value: "custom-expert.txt"

    environment:
      - name: PROMPT_FILE
        value: "{{ .promptFile }}"
      - name: PROMPT_BASE_DIR
        value: "/data"

    volumes:
      - source: "/path/to/prompts"
        target: "/data"
        mode: "ro"

    # Benefits:
    # ✅ Switch between prompts by changing environment variable
    # ✅ Health checks work automatically
    # ✅ Simple configuration
    # ✅ Can list available prompts easily

  # ALTERNATIVE: Direct File Mount
  file-mount-example:
    title: "Direct File Mount (Alternative)"
    description: "Mount specific prompt file directly"
    type: server
    image: flengure/mcp-prompt-loader:latest

    parameters:
      sourceFile:
        type: string
        title: "Source Prompt File"
        description: "Full path to prompt file on host system"
        default: "/path/to/prompts/hummingbot.txt"

      targetFile:
        type: string
        title: "Target File Path"
        description: "Path inside container where file will be mounted"
        default: "/data/prompt.txt"
        advanced: true

    environment:
      - name: PROMPT_FILE
        value: "{{ .targetFile }}"
      - name: PROMPT_BASE_DIR
        value: "/data"

    volumes:
      - source: "{{ .sourceFile }}"
        target: "{{ .targetFile }}"
        mode: "ro"

    # Trade-offs:
    # ⚠️  More complex configuration
    # ⚠️  Must specify full host paths
    # ⚠️  Health checks need adjustment
    # ✅ Slightly more secure (only specific file exposed)
    # ✅ Smaller mount surface

  # HYBRID: Multi-file Mount
  multi-file-example:
    title: "Multi-File Mount (Advanced)"
    description: "Mount multiple specific prompt files"
    type: server
    image: flengure/mcp-prompt-loader:latest

    parameters:
      expertType:
        type: string
        title: "Expert Type"
        description: "Select which expert prompt to use"
        default: "hummingbot"
        enum:
          - value: "hummingbot"
            label: "Hummingbot Trading Expert"
          - value: "n8n"
            label: "n8n Workflow Expert"
          - value: "zed"
            label: "Zed Editor Expert"

    environment:
      - name: PROMPT_FILE
        value: "/data/{{ .expertType }}.txt"
      - name: PROMPT_BASE_DIR
        value: "/data"

    volumes:
      - source: "/path/to/prompts/hummingbot.txt"
        target: "/data/hummingbot.txt"
        mode: "ro"
      - source: "/path/to/prompts/n8n.txt"
        target: "/data/n8n.txt"
        mode: "ro"
      - source: "/path/to/prompts/zed.txt"
        target: "/data/zed.txt"
        mode: "ro"

    # Use case:
    # ✅ Pre-defined set of expert prompts
    # ✅ No access to full prompt directory
    # ✅ Fine-grained control over exposed files
